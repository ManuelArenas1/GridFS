// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gridfs.proto

#include "gridfs.pb.h"
#include "gridfs.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace gridfs {

static const char* NameNode_method_names[] = {
  "/gridfs.NameNode/RegisterDataNode",
  "/gridfs.NameNode/GetPlan",
};

std::unique_ptr< NameNode::Stub> NameNode::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NameNode::Stub> stub(new NameNode::Stub(channel, options));
  return stub;
}

NameNode::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterDataNode_(NameNode_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlan_(NameNode_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NameNode::Stub::RegisterDataNode(::grpc::ClientContext* context, const ::gridfs::RegisterRequest& request, ::gridfs::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gridfs::RegisterRequest, ::gridfs::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterDataNode_, context, request, response);
}

void NameNode::Stub::async::RegisterDataNode(::grpc::ClientContext* context, const ::gridfs::RegisterRequest* request, ::gridfs::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gridfs::RegisterRequest, ::gridfs::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDataNode_, context, request, response, std::move(f));
}

void NameNode::Stub::async::RegisterDataNode(::grpc::ClientContext* context, const ::gridfs::RegisterRequest* request, ::gridfs::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDataNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gridfs::RegisterResponse>* NameNode::Stub::PrepareAsyncRegisterDataNodeRaw(::grpc::ClientContext* context, const ::gridfs::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gridfs::RegisterResponse, ::gridfs::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterDataNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gridfs::RegisterResponse>* NameNode::Stub::AsyncRegisterDataNodeRaw(::grpc::ClientContext* context, const ::gridfs::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterDataNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNode::Stub::GetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::gridfs::GetPlanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gridfs::GetPlanRequest, ::gridfs::GetPlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPlan_, context, request, response);
}

void NameNode::Stub::async::GetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest* request, ::gridfs::GetPlanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gridfs::GetPlanRequest, ::gridfs::GetPlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlan_, context, request, response, std::move(f));
}

void NameNode::Stub::async::GetPlan(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest* request, ::gridfs::GetPlanResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gridfs::GetPlanResponse>* NameNode::Stub::PrepareAsyncGetPlanRaw(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gridfs::GetPlanResponse, ::gridfs::GetPlanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPlan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gridfs::GetPlanResponse>* NameNode::Stub::AsyncGetPlanRaw(::grpc::ClientContext* context, const ::gridfs::GetPlanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPlanRaw(context, request, cq);
  result->StartCall();
  return result;
}

NameNode::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNode_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNode::Service, ::gridfs::RegisterRequest, ::gridfs::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gridfs::RegisterRequest* req,
             ::gridfs::RegisterResponse* resp) {
               return service->RegisterDataNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNode_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNode::Service, ::gridfs::GetPlanRequest, ::gridfs::GetPlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gridfs::GetPlanRequest* req,
             ::gridfs::GetPlanResponse* resp) {
               return service->GetPlan(ctx, req, resp);
             }, this)));
}

NameNode::Service::~Service() {
}

::grpc::Status NameNode::Service::RegisterDataNode(::grpc::ServerContext* context, const ::gridfs::RegisterRequest* request, ::gridfs::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNode::Service::GetPlan(::grpc::ServerContext* context, const ::gridfs::GetPlanRequest* request, ::gridfs::GetPlanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gridfs
#include <grpcpp/ports_undef.inc>

